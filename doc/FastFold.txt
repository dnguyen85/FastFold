          FastFold, folding optimization              *FastFold* *fastfold*

===========================================================================
0. Introduction ~
                                          *FastFold-intro* *fastfold-intro*

Automatic folds - that is, folds generated by a fold method different
from `manual` - bog down VIM considerably in insert mode. Also, they are often
re-evaluated prematurely for example, when inserting an opening fold marker
whose closing counterpart has yet to be added to complete the fold.

See http://vim.wikia.com/wiki/Keep_folds_closed_while_inserting_text
for a discussion.

With this plug-in, the folds in the currently edited buffer are updated when
certain triggers are met:
- when saving the buffer
- when closing or opening folds (zo, za, zc, etc...)
- when typing `zuz` in normal mode

===========================================================================
1. Commands ~
                                    *FastFold-commands* *fastfold-commands*
                                                          *FastFoldUpdate!*

- `:FastFoldUpdate` updates all folds in the current buffer.
- `:FastFoldUpdate!` updates all folds & echoes what fold method was used

- The mapping `zuz` that invokes `:FastFoldUpdate!` can be changed to your
  favorite keystroke, say `<F5>`, by 
>
    nmap <F5> <Plug>(FastFoldUpdate)
<
===========================================================================
2. Config ~
                                        *FastFold-config* *fastfold-config*

Each of the above triggers can be enabled or disabled by setting the
matching global flags in your `.vimrc`. Default values are shown.
>
  let g:fastfold_savehook = 1
  let g:fastfold_togglehook = 0
  let g:fastfold_map = 1
<
For example, by adding the following  to your `.vimrc`
>
  set foldmethod=syntax

  let g:tex_fold_enabled=1
  let g:vimsyn_folding='af'
  let g:xml_syntax_folding = 1
  let g:php_folding = 1
  let g:perl_fold = 1
  let g:fastfold_map = 0
<
You will:
- Enable syntax folding by default.
- Enable tex, vim, xml, php and perl syntax folding.
- Diable the zuz refresh so that only saving evaluates folds.

-----------------------------

- By default, the fold keystrokes associated with the toggle hook are:
  zx, zX, za, zA, zo, zO, zc, zC, zr, zR, zm, zM, zi, zn, zN.
  The corresponding mapsuffixes are:
>
  let g:fastfold_mapsuffixes =  ['x','X','a','A','o','O','c','C',
    'r','R','m','M','i','n','N']

- The exact commands that trigger the toggle hook can be modified by the
  `fastfold_mapsuffixes` variable. The list is suffixes of the fold commands
  you want to trigger with. For example, if you wanted to intercept zo and zc.
>
  let g:fastfold_mapsuffixes = ['o', 'c']
<
- If you prefer that this plug-in does not add a normal mode mapping that updates
  folds (defaults is `zuz`), then set `let g:fastfold_map = 0` to your
  `.vimrc`.

-----------------------------

The option
>
  let g:fastfold_force = 0
<
when set to 1, enables FastFold even for foldmethods other than 'syntax' and
'expr'. Because these other fold methods require little computation, there is
little benefit in forcing manual folds by FastFold, thence the default value '0'.


===========================================================================
3. Extra Notes ~

3.1 Warnings ~

Note: This plug-in will overwrite your manual folds when saving the
currently edited buffer, unless you either

- explicitly tell this plug-in to refrain from it via `g:fastfold_skipfiles`, a
  list of regular expressions against which the current file name is matched,
  or
-  when entering the buffer the local and global `foldmethod` were equal to
   `manual` and
  * since then the local and global `foldmethod` have remained equal to `manual`, or
  * since then the buffer has not been saved (if `let g:fastfold_savehook = 1`)
  and no fold has been toggled (if `let g:fastfold_savehook = 1`) and `zuz`
  (if `let g:fastfold_map = 1`) has not been typed in normal mode.

3.2 API ~

The last used fold method by which FastFold updates the folds in the current
buffer can be read off from the window local variable `w:lastdfm`.

3.2 Related Plugins ~

`FastFold` integrates with both `vim-stay` and `restore_view.Vim` that both
store and restore the last folds by the `:Mkview` and `:Loadview`.
How they compare is discussed at 

https://github.com/kopischke/vim-stay/issues/2

Note that `restore_view.vim` integrates only from version 1.2 and above and
must load AFTER `FastFold`. (To ensure the correct autocmd execution order.) 
------------------------------

A `CustomFoldText()` function that displays the percentage of the number of
buffer lines that the folded text takes up and indents folds according to
their nesting level is available at

http://www.github.com/Konfekt/FoldText

3.3 Thanks go to... ~

- starcraftman for providing this documentation, and
- blueyed, willywampa and kopischke for code improvements.

vim:tw=78:ts=2:sts=2:sw=2:ft=help:norl
